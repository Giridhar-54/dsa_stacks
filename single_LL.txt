class Node:
    def __init__(self, data):
        self.data = data
        self.ref = None
        
class LinkedList:   
    def __init__(self):   
        self.head = None

    def print_List(self):
        if self.head is None:
            print('LL is empty')
        else:
            n = self.head
            while n is not None:
                print(n.data, end='-->')
                n = n.ref
            print('None')    

    def add_begin(self, data):
        new_node = Node(data)
        new_node.ref = self.head
        self.head = new_node
        
    def add_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            n = self.head
            while n.ref is not None:
                n = n.ref
            n.ref = new_node      
            
    def add_after(self,data,x):
        n = self.head
        while n is not None:
            if x==n.data:
                break
            n = n.ref
        if n is None:
            print('ll is not present')
        else:
            new_node = Node(data)
            new_node.ref = n.ref
            n.ref = new_node
            
    def add_before(self,data,x):    
        if self.head is None:
            print("Linked list is empty")
            return

        if self.head.data == x:
            new_node = Node(data)
            new_node.ref = self.head
            self.head = new_node
            return

        n = self.head
        while n.ref is not None:
            if n.ref.data == x:
                break
            n = n.ref

        if n.ref is None:
            print(f"Node with data {x} not found")
        else:
            new_node = Node(data)
            new_node.ref = n.ref
            n.ref = new_node
            
    def add_empty(self,data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print('ll is not empty')
            
    def del_begin(self):
            if self.head is None:
                print('ll is emptyy')
            else:
                self.head = self.head.ref
            
    def del_end(self):
        if self.head is None:
            print('ll is emptyy')
        else:
            n = self.head
            while n.ref.ref is not None:
                n=n.ref
            n.ref=None
            
    def del_middle(self, x):
        if self.head is None:
            print('ll is empty')
            return
    
        if x == self.head.data:
            self.head = self.head.ref
            return
        
        n = self.head
        while n.ref is not None:
            if x == n.ref.data:
                break
            n = n.ref
    
        if n.ref is None:
            print('node not found')
        else:
            n.ref = n.ref.ref

            

ll1 = LinkedList()
ll1.add_begin(10)
ll1.add_begin(20)
ll1.add_begin(30)
ll1.add_end(100)
ll1.add_after(200,100)
ll1.add_after(500,100)
ll1.add_before(30,10)
ll1.add_before(300,500)
ll1.add_empty(50)
ll1.del_begin()
ll1.del_middle(100)
ll1.print_List()

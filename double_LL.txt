class Node:
    def __init__(self, data):
        self.data = data
        self.nref = None  
        self.pref = None 

class doublyLL:
    def __init__(self):
        self.head = None
    
    def print_LL(self):
        if self.head is None:
            print("ll is empty")
        else:
            n = self.head
            while n is not None:
                print(n.data, end="-->")
                n = n.nref
            print()
                
    def print_LL_reverse(self):
        if self.head is None:
            print("ll is empty")
        else:
            n = self.head
            while n.nref is not None:
                n = n.nref
            while n is not None:
                print(n.data, end="-->")
                n = n.pref
            print()
            
    def insert_empty(self, data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print("ll is not empty")
            
    def add_begin(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.nref = self.head
            self.head.pref = new_node
            self.head = new_node
            
    def add_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            n = self.head
            while n.nref is not None:
                n=n.nref
            n.nref=new_node
            new_node.pref=n
            
    def add_after(self,data,x):
        if self.head is None:
            print('ll is empty')
        else:
            n=self.head
            while n is not None:
                if x==n.data:
                    break
                n=n.nref
            if n is None:
                print('Node is not present')
            else:
                new_node=Node(data)
                new_node.nref=n.nref
                new_node.pref=n
                if n.nref is not None:
                    n.nref.pref=new_node
                n.nref=new_node    
                
    def add_before(self,data,x):  
        if self.head is None:
            print('ll is empty')
        else:
            n=self.head
            while n is not None:
                if x==n.data:
                    break
                n=n.nref
            if n is None:
                print('Node is not present')
            else:
                new_node=Node(data)
                new_node.nref=n
                new_node.pref=n.pref
                if n.pref is not None:
                    n.pref.nref=new_node
                else:
                    self.head=new_node
                n.pref=new_node
                
    def del_begin(self):
        if self.head is None:
            print("dll is empty")
            return
        if self.head.nref is None:
            self.head=None
            print('dll is empty')
        else:
            self.head=self.head.nref
            self.head.pref=None
    
    def del_end(self):
        if self.head is None:
            print("dll is empty")
            return
        if self.head.nref is None:
            self.head=None
            print('dll is empty')
        else:
            n=self.head
            while n.nref is not None:
                n=n.nref
            n.pref.nref=None  
            
    def del_by_value(self,x):
        if self.head is None:
            print('dll is empty')
        if self.head.nref is None:
            if x==self.head.data:
                self.head=None
            else:
                print('dll is empty')
                return
        if self.head.data==x:
            self.head=self.head.nref
            self.head.pref=None
            return
        n=self.head
        while n.nref is not None:
            if x==n.data:
                break
            n=n.nref
        if n.nref is not None:
            n.nref.pref=n.pref
            n.pref.nref=n.nref
        else:
            if n.data==x:
                n.pref.nref=None
            else:
                print('x is not present')
            

dll = doublyLL()
dll.print_LL()       
dll.add_begin(40)
dll.add_begin(60)
dll.add_begin(40)
dll.add_end(70)
dll.add_after(50,60)
dll.add_before(30,50)
dll.del_begin()
dll.del_end()
dll.del_by_value(60)

dll.print_LL()
dll.print_LL_reverse()
